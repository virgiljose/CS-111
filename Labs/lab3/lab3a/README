NAME: Virgil Jose, Christopher Ngai
EMAIL: xxxxxxxxx, xxxxxxxxx
ID: xxxxxxxxx, xxxxxxxxx

********************
* CONTENTS OF FILE *
********************

lab3a.c:
	lab3a.c is a C source module that reads a file system image based on the name specified in the command line argument. The program analyzes
	the provided file system image and prints CSV summaries to standard output of specific information regarding the file system. The program
	prints out inforrmation regarding information about the file system superblock, each group in the file system, each free block bitmap in each
	group, each free I-node entry in each group, each I-node in each group, each directory entry, and each single, double, and triple indirect
	block references per I-node. The program should output the CSV summaries in the specific format specified by the project spec.

Makefile:
	Makefile is a file that builds and runs the deliverable program. It contains the following targets: default, dist, and clean. The default
	target compiles the lab3a.c source code and produces the lab3a executable. It compiles with the -Wall and -Wextra flags. The dist target
	creates the deliverable tarball with all the necessary contents needed to submit the project. The clean target removes all programs and output
	generated by the Makefile, including the tarball and the lab3a executable.

*********************
* OTHER INFORMATION *
*********************

Ext2 Filesystem Manual:
	http://cs.smith.edu/~nhowe/262/oldlabs/ext2.html#struct

	This website helped us learn the overarching structure of the Ext2 filesystem and helped us understand how the super block, group descriptors,
	inodes and blocks bitmaps, inode table, and inode entries worked. It helped describe the purpose of the member variables in each struct that
	was defined in the ext2_fs.h header file.

Indirect Block References:
	https://cs.nyu.edu/courses/spring09/V22.0202-002/lectures/lecture-24.html

	This website helped us learn about the inode table and how the data blocks, indirect blocks, and double/triple indirect blocks were structured.
	We learned that the inode points to an indirect block, which then points to other data blocks. Furthermore, the double indirect block points
	to single indirect blocks, which points to data blocks. Finally, the triple indirect block points to double indirect blocks, which point to
	single indirect blocks, which point to more data blocks.